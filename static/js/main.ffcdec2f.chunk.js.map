{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","getItem","setItem","JSON","stringify","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ffcdec2f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = ({ inputText, setInputText, todos, setTodos, setStatus }) => {\r\n\r\n    const inputTextHandler = (e) => {\r\n        setInputText(e.target.value)\r\n    }\r\n    const submitTodoHandler = (e) => {\r\n        e.preventDefault();\r\n        setTodos([\r\n            ...todos, { text: inputText, completed: false, id: Math.random() * 1000 }\r\n        ])\r\n        setInputText(\"\");\r\n    }\r\n    const statusHandler = (e) => {\r\n        setStatus(e.target.value)\r\n    }\r\n    return (\r\n        <form>\r\n            <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n            <button onClick={submitTodoHandler} type=\"submit\" className=\"todo-button\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"incompleted\">Incompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n\r\n    //Events\r\n    const deleteHandler = () => {\r\n        setTodos(todos.filter(el => el.id !== todo.id))\r\n    }\r\n    const completeHandler = () => {\r\n        setTodos(todos.map((item) => {\r\n            if (item.id === todo.id) {\r\n                return {\r\n                    ...item,\r\n                    completed: !item.completed\r\n                }\r\n            }\r\n            return item\r\n        }))\r\n    }\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\r\n            <button onClick={completeHandler} className=\"complete-btn\">\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\">\r\n                <i className=\"fas fa-trash-alt\"></i>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\n\r\nimport Todo from './Todo'\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {filteredTodos.map((todo => (\r\n                    <Todo\r\n                        todos={todos}\r\n                        setTodos={setTodos}\r\n                        key={todo.id}\r\n                        todo={todo}\r\n                        text={todo.text}\r\n                    />\r\n                )))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport Form from './components/Form'\nimport TodoList from './components/TodoList'\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\")\n  const [todos, setTodos] = useState([])\n  const [status, setStatus] = useState('all')\n  const [filteredTodos, setFilteredTodos] = useState([])\n\n  //Run once when the app starts\n  useEffect(() => {\n    getLocalTodos()\n  }, []);\n\n  //Use effect\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]);\n\n  //Functions\n  const filterHandler = () => {\n    switch (status) {\n      case 'completed':\n        setFilteredTodos(todos.filter((todo) => todo.completed === true))\n        break;\n      case 'incompleted':\n        setFilteredTodos(todos.filter((todo) => todo.completed === false))\n        break;\n      default:\n        setFilteredTodos(todos)\n        break;\n    }\n  }\n\n  //Save to local\n  const saveLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify(todos))\n\n    }\n  }\n  const getLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]))\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem('todos'))\n      setTodos(todoLocal)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Wizard's Todo List</h1>\n      </header>\n      <Form\n        todos={todos}\n        setTodos={setTodos}\n        inputText={inputText}\n        setInputText={setInputText}\n        setStatus={setStatus}\n      />\n      <TodoList filteredTodos={filteredTodos}\n        setTodos={setTodos} todos={todos} />\n    </div>\n  );\n\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}